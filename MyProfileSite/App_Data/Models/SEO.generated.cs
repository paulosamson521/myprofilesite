//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.10.102
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	// Mixin content Type 1063 with alias "sEO"
	/// <summary>_SEO</summary>
	public partial interface ISEO : IPublishedContent
	{
		/// <summary>Meta Description</summary>
		string MetaDescription { get; }

		/// <summary>Meta Keywords</summary>
		string MetaKeywords { get; }

		/// <summary>Meta Title</summary>
		string MetaTitle { get; }

		/// <summary>No Follow</summary>
		bool NoFollow { get; }

		/// <summary>No Index</summary>
		bool NoIndex { get; }

		/// <summary>OG Image</summary>
		IPublishedContent OgImage { get; }

		/// <summary>OG Label</summary>
		Newtonsoft.Json.Linq.JToken OGlabel { get; }

		/// <summary>OG Title</summary>
		string OgTitle { get; }

		/// <summary>OG Description</summary>
		string OpenGraphDescription { get; }
	}

	/// <summary>_SEO</summary>
	[PublishedContentModel("sEO")]
	public partial class SEO : PublishedContentModel, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sEO";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SEO(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SEO, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Meta Description: A brief description of the page.
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return GetMetaDescription(this); }
		}

		/// <summary>Static getter for Meta Description</summary>
		public static string GetMetaDescription(ISEO that) { return that.GetPropertyValue<string>("metaDescription"); }

		///<summary>
		/// Meta Keywords: Comma separated list of keywords for search engines
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return GetMetaKeywords(this); }
		}

		/// <summary>Static getter for Meta Keywords</summary>
		public static string GetMetaKeywords(ISEO that) { return that.GetPropertyValue<string>("metaKeywords"); }

		///<summary>
		/// Meta Title: This is the text you'll see at the top of your browser
		///</summary>
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle
		{
			get { return GetMetaTitle(this); }
		}

		/// <summary>Static getter for Meta Title</summary>
		public static string GetMetaTitle(ISEO that) { return that.GetPropertyValue<string>("metaTitle"); }

		///<summary>
		/// No Follow: Prevents search engine from following links on this page.
		///</summary>
		[ImplementPropertyType("noFollow")]
		public bool NoFollow
		{
			get { return GetNoFollow(this); }
		}

		/// <summary>Static getter for No Follow</summary>
		public static bool GetNoFollow(ISEO that) { return that.GetPropertyValue<bool>("noFollow"); }

		///<summary>
		/// No Index: Prevents search engine from indexing this page.
		///</summary>
		[ImplementPropertyType("noIndex")]
		public bool NoIndex
		{
			get { return GetNoIndex(this); }
		}

		/// <summary>Static getter for No Index</summary>
		public static bool GetNoIndex(ISEO that) { return that.GetPropertyValue<bool>("noIndex"); }

		///<summary>
		/// OG Image: Image that will be shown on social media when this page is shared.  Recommended size: Width: 1200px Height: 630px  Minimum size: Width: 600px Height: 315px
		///</summary>
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage
		{
			get { return GetOgImage(this); }
		}

		/// <summary>Static getter for OG Image</summary>
		public static IPublishedContent GetOgImage(ISEO that) { return that.GetPropertyValue<IPublishedContent>("ogImage"); }

		///<summary>
		/// OG Label: This is used when the page is shared on social media.
		///</summary>
		[ImplementPropertyType("oGLabel")]
		public Newtonsoft.Json.Linq.JToken OGlabel
		{
			get { return GetOGlabel(this); }
		}

		/// <summary>Static getter for OG Label</summary>
		public static Newtonsoft.Json.Linq.JToken GetOGlabel(ISEO that) { return that.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("oGLabel"); }

		///<summary>
		/// OG Title: The title that will be shown on social media. Limit 40 characters. If empty, the default is Page Title.
		///</summary>
		[ImplementPropertyType("ogTitle")]
		public string OgTitle
		{
			get { return GetOgTitle(this); }
		}

		/// <summary>Static getter for OG Title</summary>
		public static string GetOgTitle(ISEO that) { return that.GetPropertyValue<string>("ogTitle"); }

		///<summary>
		/// OG Description: A brief description of the page. Limit 300 characters. If empty, the default is "Meta Description".
		///</summary>
		[ImplementPropertyType("openGraphDescription")]
		public string OpenGraphDescription
		{
			get { return GetOpenGraphDescription(this); }
		}

		/// <summary>Static getter for OG Description</summary>
		public static string GetOpenGraphDescription(ISEO that) { return that.GetPropertyValue<string>("openGraphDescription"); }
	}
}
